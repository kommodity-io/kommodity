name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Install dependencies
        run: go mod download

      - name: Lint
        uses: golangci/golangci-lint-action@v8

  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      issues: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Install dependencies
        run: go mod download

      - uses: gwatts/go-coverage-action@v2
        id: coverage
        with:
          # Disable coverage threshold.
          coverage-threshold: 0
          # Include side-effect coverage.
          cover-pkg: ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pages: write
      contents: write
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Install dependencies
        run: go mod download

      - name: Detect semantic release
        uses: docker://ghcr.io/codfish/semantic-release-action:v3
        id: semantic
        with:
          repository-url: https://github.com/${{ github.repository }}
          branches: |
            [
              "main"
            ]
          plugins: |
            [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/github"
            ]
          dry-run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute version
        id: version
        run: |
          set -eou pipefail

          version="${{ steps.semantic.outputs.git-tag }}"
          if [[ -z "$version" ]]; then
            version="$(git describe --tags --always)"
          fi

          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Build
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} VERSION="${{ steps.version.outputs.version }}" make build

      - name: Rename binary
        run: |
          set -eou pipefail

          target="kommodity-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.version.outputs.version }}"
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            target="${target}.exe"
          fi

          mv bin/kommodity bin/${target}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kommodity-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: bin/kommodity-*

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4

      - name: Move binaries
        run: |
          set -eou pipefail

          mkdir -p release

          mapfile -t binaries < <(find . -type d -name 'kommodity-*' -print0 | xargs -0 -I {} find {} -type f)
          for binary in "${binaries[@]}"; do
            mv "$binary" "release/$(basename "$binary")"
          done

          ls -lah release

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4

      - name: Create release
        uses: docker://ghcr.io/codfish/semantic-release-action:v3
        with:
          repository-url: https://github.com/${{ github.repository }}
          branches: |
            [
              "main"
            ]
          plugins: |
            [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              ["@semantic-release/github", { assets: [{ path: "release/**"}] }]
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
