name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 10

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: stable
          check-latest: true

      - name: Install dependencies
        run: go mod download

      - name: Setup NPM
        uses: actions/setup-node@v4
        with:
          node-version: "24.2.0"
          cache: "npm"
          cache-dependency-path: pkg/ui/web/kommodity-ui/package-lock.json

      - name: Install UI dependencies
        run: npm install --prefix pkg/ui/web/kommodity-ui

      - name: Lint
        run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 10

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: stable
          check-latest: true

      - name: Install dependencies
        run: go mod download

      - name: Setup NPM
        uses: actions/setup-node@v4
        with:
          node-version: "24.2.0"
          cache: "npm"
          cache-dependency-path: pkg/ui/web/kommodity-ui/package-lock.json

      - name: Install UI dependencies
        run: npm install --prefix pkg/ui/web/kommodity-ui

      - name: Calculate test coverage
        uses: gwatts/go-coverage-action@v2
        id: coverage
        with:
          # Disable coverage threshold.
          coverage-threshold: 0
          # Include side-effect coverage.
          cover-pkg: ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pages: write
      contents: write
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: stable
          check-latest: true

      - name: Install dependencies
        run: go mod download

      - name: Setup NPM
        uses: actions/setup-node@v4
        with:
          node-version: "24.2.0"
          cache: "npm"
          cache-dependency-path: pkg/ui/web/kommodity-ui/package-lock.json

      - name: Install UI dependencies
        run: npm install --prefix pkg/ui/web/kommodity-ui

      - name: Detect semantic release
        uses: docker://ghcr.io/codfish/semantic-release-action:v3
        id: semantic
        with:
          repository-url: https://github.com/${{ github.repository }}
          branches: |
            [
              "main"
            ]
          plugins: |
            [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/github"
            ]
          dry-run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute version and compression
        id: version
        run: |
          set -eou pipefail

          version="${{ steps.semantic.outputs.git-tag }}"
          compression="--ultra-brute -9"
          if [[ -z "$version" ]]; then
            version="$(git describe --tags --always)"
            compression="-qq"
          fi

          # Avoid compression for darwin as it is not supported on MacOS 13+.
          # Reference: https://github.com/upx/upx/issues/612
          if [[ "${{ matrix.os }}" == "darwin" ]]; then
            compression=""
          fi

          # Avoid compression for windows/arm64 as it is not supported.
          # Reference: https://github.com/upx/upx/issues/650
          if [[ "${{ matrix.os }}" == "windows" && "${{ matrix.arch }}" == "arm64" ]]; then
            compression=""
          fi

          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "compression=$compression" >> "$GITHUB_OUTPUT"

      - name: Build
        run: make build
        env:
          GOOS: "${{ matrix.os }}"
          GOARCH: "${{ matrix.arch }}"
          VERSION: "${{ steps.version.outputs.version }}"
          UPX_FLAGS: "${{ steps.version.outputs.compression }}"

      - name: Rename binary
        run: |
          set -eou pipefail

          target="kommodity-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.version.outputs.version }}"
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            target="${target}.exe"
          fi

          mv bin/kommodity bin/${target}

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: kommodity-${{ matrix.os }}-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: bin/kommodity-*

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download binaries
        uses: actions/download-artifact@v6

      - name: Download binaries
        uses: actions/download-artifact@v6
        with:
          path: release
          merge-multiple: true

      - name: Create release
        uses: docker://ghcr.io/codfish/semantic-release-action:v3
        with:
          repository-url: https://github.com/${{ github.repository }}
          branches: |
            [
              "main"
            ]
          plugins: |
            [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              ["@semantic-release/github", { assets: [{ path: "release/**"}] }]
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs:
      - release
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

        # We get the version from the git tag and not from the semantic-release output,
        # because if the pipeline fails after a release is created,
        # on rerun, semantic-release output will be null but we still want build and push a new docker image.
      - name: Extract version from tag
        id: extract_version
        run: |
          #!/bin/bash

          git fetch --tags --force

          TAGS=$(git tag --points-at HEAD)

          # Filter tags matching semantic version pattern
          SEMVER_TAG=$(echo "$TAGS" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)

          if [ -z "$SEMVER_TAG" ]; then
              echo "No semantic version tag found for this commit."
              exit 1
          else
              echo "Found semantic version tag: $SEMVER_TAG"
              echo "version=${SEMVER_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.180
        with:
          context: .
          file: Containerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}/kommodity:latest
            ghcr.io/${{ github.repository }}/kommodity:${{ steps.extract_version.outputs.version }}
            ghcr.io/${{ github.repository }}/kommodity:${{ github.sha }}
